package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate joinPredicate;
    private OpIterator child1, child2;
    private TupleIterator tupleIterator;
    private TupleDesc mergedTd;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        this.joinPredicate = p;
        this.child1 = child1;
        this.child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc()
                    .getFieldName(joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc()
                .getFieldName(joinPredicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        mergedTd = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
        return mergedTd;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        super.open();
        tupleIterator = nestedLoopsJoin();
        tupleIterator.open();
    }

    public void close() {
        // some code goes here
        child1.close();
        child2.close();
        super.close();
        tupleIterator.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
        tupleIterator.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        if(tupleIterator.hasNext())
            return tupleIterator.next();
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[]{child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        if (this.child1 != children[0]) {
            this.child1 = children[0];
        }
        if (children.length > 1 && this.child2 != children[1]) {
            this.child2 = children[1];
        }
    }

    /**
     * Merge two Tuple into one, with td1.numFields + td2.numFields fields,
     * with the first td1.numFields coming from td1 and the remaining from td2.
     * @param t1 the first Tuple
     *
     * @param t2 the second Tuple
     * @return the new Tuple
     */
    private Tuple mergeTuples(Tuple t1, Tuple t2){
        int j = 0;
        int numFields1 = t1.getTupleDesc().numFields();
        int numFields2 = t2.getTupleDesc().numFields();
        int totNumFields = numFields1 + numFields2;
        Tuple mergedTuple = new Tuple(getTupleDesc());

        for(int i = 0; i < totNumFields; i++){

            if(i < numFields1)
                mergedTuple.setField(i, t1.getField(i));

            else{
                mergedTuple.setField(i, t2.getField(j));
                j ++;
            }
        }
        return mergedTuple;
    }

    /**
     * Implement nested loops join; each tuple in child1 is merged with
     * each tuple in child2 if the join predicate is satisfied.
     * @return a TupleIterator of the resulting merged tuples.
     */
    private TupleIterator nestedLoopsJoin() throws TransactionAbortedException, DbException {
        ArrayList<Tuple> tuplesResult = new ArrayList<>();
        child1.rewind();
        while (child1.hasNext()){

            Tuple outer = child1.next();
            child2.rewind();
            while (child2.hasNext()){

                Tuple inner = child2.next();
                if(joinPredicate.filter(outer,inner))
                    tuplesResult.add(mergeTuples(outer, inner));
            }
        }
        return new TupleIterator(mergedTd, tuplesResult);
    }


}
